UMLBegin
dnl Keep the class names in alphabetical order, please.

Class(`Board', `
    Field(`width', `int'),
    Field(`height', `int'),
    Field(`positions', `Tile[][]'),
    Field(`players', `List_Player_'),
    Field(`crates', `List_Crate_'),
    Field(`finishTiles', `List_FloorTile_'),
    Field(`pieces', `List_GamePiece_')',
`
    Constructor(`filePath:String'),
    Method(`getPosition', `pos:Point', `Tile'),
    Method(`setPosition', `pos:Point,t:Tile', `void'),
    Method(`addFinishTile', `t:FloorTile', `void'),
    Method(`getHeight', `', `int'),
    Method(`getWidth', `', `int'),
    Method(`doMove', `direction:int', `boolean'),
    Method(`getTiles', `', `Tile[][]'),
    Method(`tileIterator', `', `Iterator_Tile_'),
    Method(`addPieces', `', `void'),
    Method(`gamePieceIterator', `', `List_GamePiece_'),
    Method(`getPlayers', `', `List_Player_'),
    Method(`getCrates', `', `List_Crate_'),
    Method(`getFinishTiles', `', `List_FloorTiles_'),
    Method(`undo', `', `void'),
    Method(`addPieceUndo', `', `void'),
    Method(`nearbyPoint', `start:Point,direction:int', `Point'),
    Method(`isFinished', `', `boolean'),
    Method(`toString', `', `String'),
    Method(`clone', `', `')');
Aggregates(`Board', `Tile');
Aggregates(`Board', `Player');
Aggregates(`Board', `Crate');
Aggregates(`Board', `FloorTile');
Aggregates(`Board', `GamePiece');

Class(`Controller', `
    Field(`scores', `ScoreParser'),
    Field(`v', `GameView'),
    Field(`gameButtons', `JPanel'),
    Field(`gameWindow', `JPanel'),
    Field(`panels', `JPanel'),
    Field(`startButton', `JButton'),
    Field(`restartButton', `JButton'),
    Field(`pauseButton', `JButton'),
    Field(`state', `Mode'),
    Field(`b', `Board'),
    Field(`m', `Menu'),
    Field(`running', `boolean'),
    Field(`gg', `boolean'),
    Field(`moving', `boolean'),
    Field(`moveIncrement', `double'),
    Field(`gameNum', `int'),
    Field(`campaignNum', `int'),
    Field(`moves', `int'),
    Field(`campaignMoves', `int'),
    Field(`playerName', `String')',
`
    Constructor(`path:String'),
    PrivMethod(`gameLayout', `', `void'),
    PrivMethod(`switchLayout', `', `void'),
    Method(`newGame', `', `void'),
    PrivMethod(`makeModel', `reset:boolean', `void'),
    Method(`runGameLoop', `', `void'),
    Method(`threadGen', `', `void'),
    PrivMethod(`gameLoop', `', `void'),
    PrivMethod(`logCampaignScore', `', `void'),
    PrivMethod(`populateSavedGames', `path:String', `void'),
    PrivMethod(`updateGameState', `', `void'),
    PrivMethod(`drawGame', `', `void'),
    Method(`processEvent', `e:KeyEvent', `void'),
    Method(`actionPerformed', `e:ActionEvent', `void'),
    PrivMethod(`processSettings', `', `void'),
    Method(`resizeView', `', `void')')
Aggregates(`Controller', `GameView');
Aggregates(`Controller', `ScoreParser');
Aggregates(`Controller', `Mode');
Aggregates(`Controller', `Board');
Aggregates(`Controller', `Menu');

Class(`Crate', `', `
    Constructor(`myBoard:Board,startCoord:Point'),
    Method(`getType', `', `int'),
    Method(`doMove', `direction:int', `boolean'),
    Method(`bePushed', `direction:int', `boolean')');
Extends(`Crate', `GamePiece');

Class(`FloorTile', `
    Field(`contents', `GamePiece')',
`
    Constructor(`startCoord:Point'),
    Method(`canBeFilled', `', `boolean'),
    Method(`getContents', `', `boolean'),
    Method(`setContents', `content:GamePiece', `boolean')');
Extends(`FloorTile', `Tile');
Aggregates(`FloorTile', `GamePiece');

Class(`GameView', `
    Field(`b', `Board'),
    Field(`gameState', `JLabel'),
    Field(`tiles', `SpriteSheet'),
    Field(`player', `SpriteSheet')',
`
    Constructor(`'),
    Constructor(`b:Board'),
    PrivMethod(`loadSpriteSheet', `p:String,r:int,c:int,w:int,h:int,n:int', `SpriteSheet'),
    Method(`paintComponent', `g:Graphics', `void'),
    Method(`resetBoard', `b:Board', `void'),
    Method(`showLabel', `msg:String', `void'),
    Method(`hideLabel', `', `void'),
    PrivMethod(`paintBackground', `g:Graphics,sqW:double,sqH:double', `void'),
    PrivMethod(`paintPlayers', `g:Graphics,sqW:double,sqH:double', `void'),
    PrivMethod(`paintCrates', `g:Graphics,sqW:double,sqH:double', `void'),
    PrivMethod(`paintTile', `g:Graphics,t:Tile,sqW:double,sqH:double', `void'),
    PrivMethod(`paintPiece', `g:Graphics,p:GamePiece,sqW:double,sqH:double', `void'),
    Method(`resizeSprites', `', `void')');
Aggregates(`GameView', `Board');
Aggregates(`GameView', `SpriteSheet');
AssociatedWith(`GameView', `Tile');
AssociatedWith(`GameView', `GamePiece');
DependsOn(`GameView', `SpriteSheetBuilder');

Class(`Model', `
    Field(`board', `Board'),
    Field(`p', `Player')',
`
    Constructor(`'),
    Constructor(`filePath:String'),
    Method(`getPlayer', `', `Player'),
    Method(`parseXML', `filePath:String', `int[][]'),
    Method(`getBoard', `', `Board'),
    Method(`canMove', `direction:int', `boolean'),
    Method(`doMove', `direction:int', `boolean')');
AssociatedWith(`Model', `Board');
AssociatedWith(`Model', `Player');

Class(`Player', `
    Field(`thisCoord', `Coord')',
`
    Constructor(`startCoord:Coord'),
    Method(`getCoord', `', `Coord'),
    Method(`canMove', `direction:int,gameBoard:Board', `boolean'),
    Method(`doMove', `direction:int,gameBoard:Board', `boolean'),
    Method(`setCoord', `updated:Coord', `void')');
Aggregates(`Player', `Coord');
AssociatedWith(`Player', `Board');
DependsOn(`Player', `Tile');

Class(`Tile', `
    Field(`thisCoord', `Coord')',
`
    Constructor(`startCoord:Coord'),
    Method(`getCoord', `', `Coord'),
    Method(`canBeFilled', `', `boolean')');
Aggregates(`Tile', `Coord');
AssociatedWith(`Tile', `Board');

Class(`WarehouseBoss', `', `
    Method(`(static)main', `args:String[]', `void')');
AssociatedWith(`WarehouseBoss', `Controller');

UMLEnd
/*

              F - G - H                  feature
             /         \
    A - B - C - D - E - I                master
            ^           ^
            branch      merge

    [^feature]$ git checkout master
    [^master]$ git merge feature

              ...     F' - G' - H'       feature
             /       /
    A - B - C - D - E                    master
            ^       ^
     'branch'       rebase

    [^feature]$ git rebase master

*/
