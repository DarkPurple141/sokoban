UMLBegin
dnl Keep the class names in alphabetical order, please.

Class(`Board', `
    Field(`width', `int'),
    Field(`height', `int'),
    Field(`positions', `Tile[][]'),
    Field(`players', `List_Player_'),
    Field(`crates', `List_Crate_'),
    Field(`finishTiles', `List_FloorTile_')',
`
    Constructor(`filePath:String'),
    Method(`getPosition', `pos:Point', `Tile'),
    Method(`getHeight', `', `int'),
    Method(`getWidth', `', `int'),
    Method(`doMove', `direction:int'),
    Method(`getTiles', `', `Tile[][]'),
    Method(`getPlayers', `', `List_Player_'),
    Method(`getCrates', `', `List_Crate_'),
    Method(`getFinishTiles', `', `List_FloorTiles_'),
    Method(`iterator', `', `Iterator_Tile_'),
    Method(`saveGame', `filename:String', `void'),
    Method(`debug', `player:int,num:int', `void'),
    PrivMethod(`xmlToLevel', `filePath:String', `void'),
    PrivMethod(`intToTile', `code:int,x:int,y:int', `Tile'),
    Method(`isFinished', `', `boolean')');
Aggregates(`Board', `Tile');
Aggregates(`Board', `Player');
Aggregates(`Board', `Crate');
Aggregates(`Board', `FloorTile');
AssociatedWith(`Board', `Coord');

Class(`Controller', `
    Field(`levelPath', `String'),
    Field(`v', `GameView'),
    Field(`b', `Board'),
    Field(`running', `boolean'),
    Field(`paused', `boolean'),
    Field(`fps', `int'),
    Field(`frameCount', `int'),
    Field(`startButton', `JButton'),
    Field(`restartButton', `JButton'),
    Field(`pauseButton', `JButton')',
`
    Constructor(`path:String'),
    Constructor(`'),
    PrivMethod(`constructorHelper', `', `void'),
    Method(`newGame', `', `void'),
    PrivMethod(`makeModel', `filePath:String', `void'),
    Method(`runGameLoop', `', `void'),
    PrivMethod(`gameLoop', `', `void'),
    PrivMethod(`updateGameState', `', `void'),
    PrivMethod(`drawGame', `', `void'),
    Method(`processEvent', `e:KeyEvent', `void'),
    Method(`actionPerformed', `e:ActionEvent', `void'),
    Method(`resizeView', `', `void')')
Aggregates(`Controller', `GameView');
Aggregates(`Controller', `Board');

Class(`Crate', `
    Field(`thisCoord', `Coord')',
`
    Constructor(`startCoord:Coord'),
    Method(`getCoord', `', `Coord'),
    Method(`canMove', `direction:int,gameBoard:Board', `boolean'),
    Method(`doMove', `direction:int,gameBoard:Board', `boolean'),
    Method(`setCoord', `updated:Coord', `void')');
Aggregates(`Crate', `Coord');
AssociatedWith(`Crate', `Board');
DependsOn(`Crate', `Tile');

Class(`FinishTile', `', `
    Constructor(`startCoord:Coord'),
    Method(`hasBox', `', `boolean')');
Extends(`FinishTile', `ContainerTile');
AssociatedWith(`FinishTile', `Coord');

Class(`Model', `
    Field(`board', `Board'),
    Field(`p', `Player')',
`
    Constructor(`'),
    Constructor(`filePath:String'),
    Method(`getPlayer', `', `Player'),
    Method(`parseXML', `filePath:String', `int[][]'),
    Method(`getBoard', `', `Board'),
    Method(`canMove', `direction:int', `boolean'),
    Method(`doMove', `direction:int', `boolean')');
AssociatedWith(`Model', `Board');
AssociatedWith(`Model', `Player');

Class(`Player', `
    Field(`thisCoord', `Coord')',
`
    Constructor(`startCoord:Coord'),
    Method(`getCoord', `', `Coord'),
    Method(`canMove', `direction:int,gameBoard:Board', `boolean'),
    Method(`doMove', `direction:int,gameBoard:Board', `boolean'),
    Method(`setCoord', `updated:Coord', `void')');
Aggregates(`Player', `Coord');
AssociatedWith(`Player', `Board');
DependsOn(`Player', `Tile');

Class(`Tile', `
    Field(`thisCoord', `Coord')',
`
    Constructor(`startCoord:Coord'),
    Method(`getCoord', `', `Coord'),
    Method(`canBeFilled', `', `boolean')');
Aggregates(`Tile', `Coord');
AssociatedWith(`Tile', `Board');

Class(`View', `
    Field(`mainFrame', `JFrame'),
    Field(`rows', `int'),
    Field(`cols', `int'),
    Field(`b', `Board')',
`
    Constructor(`w:WBListener,rows:int,cols:int,b:Board'),
    Method(`getFrame', `', `JFrame'),
    Method(`getBoard', `', `Board'),
    Method(`paintTiles', `', `void')');
Aggregates(`View', `Board');

Class(`WarehouseBoss', `', `
    Method(`(static)main', `args:String[]', `void')');
AssociatedWith(`WarehouseBoss', `Controller');

Class(`WBListener', `
    Field(`c', `Controller')',
`
    Constructor(`n:Controller'),
    Method(`update', `e:KeyEvent', `void'),
    Method(`keyPressed', `e:KeyEvent', `void')');
Aggregates(`WBListener', `Controller')

UMLEnd
/*

              F - G - H                  feature
             /         \
    A - B - C - D - E - I                master
            ^           ^
            branch      merge

    [^feature]$ git checkout master
    [^master]$ git merge feature

              ...     F' - G' - H'       feature
             /       /
    A - B - C - D - E                    master
            ^       ^
     'branch'       rebase

    [^feature]$ git rebase master

*/
