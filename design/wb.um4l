UMLBegin
dnl Keep the class names in alphabetical order, please.

Class(`Board', `
    Field(`width', `int'),
    Field(`height', `int'),
    Field(`positions', `Tile[][]'),
    Field(`players', `List_Player_'),
    Field(`crates', `List_Crate_'),
    Field(`finishTiles', `List_FloorTile_'),
    Field(`pieces', `List_GamePiece_')',
`
    Constructor(`filePath:String'),
    Method(`getPosition', `pos:Point', `Tile'),
    Method(`setPosition', `pos:Point,t:Tile', `void'),
    Method(`addFinishTile', `t:FloorTile', `void'),
    Method(`getHeight', `', `int'),
    Method(`getWidth', `', `int'),
    Method(`doMove', `direction:int', `boolean'),
    Method(`getTiles', `', `Tile[][]'),
    Method(`tileIterator', `', `Iterator_Tile_'),
    Method(`addPieces', `', `void'),
    Method(`gamePieceIterator', `', `List_GamePiece_'),
    Method(`getPlayers', `', `List_Player_'),
    Method(`getCrates', `', `List_Crate_'),
    Method(`getFinishTiles', `', `List_FloorTiles_'),
    Method(`undo', `', `void'),
    Method(`addPieceUndo', `', `void'),
    Method(`nearbyPoint', `start:Point,direction:int', `Point'),
    Method(`isFinished', `', `boolean'),
    Method(`toString', `', `String'),
    Method(`clone', `', `')');
Aggregates(`Board', `Tile');
Aggregates(`Board', `Player');
Aggregates(`Board', `Crate');
Aggregates(`Board', `FloorTile');
Aggregates(`Board', `GamePiece');

Class(`Controller', `
    Field(`scores', `ScoreParser'),
    Field(`v', `GameView'),
    Field(`gameButtons', `JPanel'),
    Field(`gameWindow', `JPanel'),
    Field(`panels', `JPanel'),
    Field(`startButton', `JButton'),
    Field(`restartButton', `JButton'),
    Field(`pauseButton', `JButton'),
    Field(`state', `Mode'),
    Field(`b', `Board'),
    Field(`m', `GameMenu'),
    Field(`running', `boolean'),
    Field(`gg', `boolean'),
    Field(`moving', `boolean'),
    Field(`moveIncrement', `double'),
    Field(`gameNum', `int'),
    Field(`campaignNum', `int'),
    Field(`moves', `int'),
    Field(`campaignMoves', `int'),
    Field(`playerName', `String')',
`
    Constructor(`path:String'),
    PrivMethod(`gameLayout', `', `void'),
    PrivMethod(`switchLayout', `', `void'),
    Method(`newGame', `', `void'),
    PrivMethod(`makeModel', `reset:boolean', `void'),
    Method(`runGameLoop', `', `void'),
    Method(`threadGen', `', `void'),
    PrivMethod(`gameLoop', `', `void'),
    PrivMethod(`logCampaignScore', `', `void'),
    PrivMethod(`populateSavedGames', `path:String', `void'),
    PrivMethod(`updateGameState', `', `void'),
    PrivMethod(`drawGame', `', `void'),
    Method(`processEvent', `e:KeyEvent', `void'),
    Method(`actionPerformed', `e:ActionEvent', `void'),
    PrivMethod(`processSettings', `', `void'),
    Method(`resizeView', `', `void')')
Aggregates(`Controller', `GameView');
Aggregates(`Controller', `ScoreParser');
Aggregates(`Controller', `Mode');
Aggregates(`Controller', `Board');
Aggregates(`Controller', `GameMenu');

Class(`Crate', `', `
    Constructor(`myBoard:Board,startCoord:Point'),
    Method(`getType', `', `int'),
    Method(`doMove', `direction:int', `boolean'),
    Method(`bePushed', `direction:int', `boolean')');
Extends(`Crate', `GamePiece');

dnl no non-static methods... x_x
Class(`FileIO', `', `');
AssociatedWith(`FileIO', `Board');
AssociatedWith(`FileIO', `Tile');

Class(`FloorTile', `
    Field(`contents', `GamePiece')',
`
    Constructor(`startCoord:Point'),
    Method(`canBeFilled', `', `boolean'),
    Method(`getContents', `', `boolean'),
    Method(`setContents', `content:GamePiece', `boolean')');
Extends(`FloorTile', `Tile');
Aggregates(`FloorTile', `GamePiece');

Class(`GameMenu', `
    Field(`playNow', `JButton'),
    Field(`loadGame', `JButton'),
    Field(`campaign', `JButton'),
    Field(`settings', `JButton'),
    Field(`exit', `JButton')',
`
    Constructor(`c:Controller'),
    Method(`getPlayNow', `', `JButton'),
    Method(`getLoadGame', `', `JButton'),
    Method(`getCampaign', `', `JButton'),
    Method(`getSettings', `', `JButton'),
    Method(`getExit', `', `JButton'),
    PrivMethod(`makeButton', `name:String,c:Controller', `JButton')');

Class(`GamePiece', `
    Field(`b', `Board'),
    Field(`here', `Point'),
    Field(`prevCoords', `ArrayDeque_Point_'),
    Field(`animOffset', `Point2D')',
`
    Constructor(`b:Board,start:Point'),
    Method(`getCoord', `', `Point'),
    Method(`setCoord', `coord:Point', `void'),
    Method(`getAnimOffset', `', `Point2D'),
    Method(`animFrame', `step:double', `void'),
    Method(`getType', `void', `int'),
    Method(`doMove', `dir:Direction', `boolean'),
    Method(`bePushed', `dir:Direction', `boolean'),
    Method(`getBoard', `', `Board'),
    Method(`prepAnimation', `dir:Direction', `void'),
    PrivMethod(`clipDouble', `o:double,s:double', `double'),
    Method(`storePrevCoord', `', `'),
    Method(`undo', `', `void')');
Aggregates(`GamePiece', `Board');
AssociatedWith(`GamePiece', `Direction');

Class(`GameView', `
    Field(`b', `Board'),
    Field(`gameState', `JLabel'),
    Field(`tiles', `SpriteSheet'),
    Field(`player', `SpriteSheet')',
`
    Constructor(`'),
    Constructor(`b:Board'),
    PrivMethod(`loadSpriteSheet', `p:String,r:int,c:int,w:int,h:int,n:int', `SpriteSheet'),
    Method(`paintComponent', `g:Graphics', `void'),
    Method(`resetBoard', `b:Board', `void'),
    Method(`showLabel', `msg:String', `void'),
    Method(`hideLabel', `', `void'),
    PrivMethod(`paintBackground', `g:Graphics,sqW:double,sqH:double', `void'),
    PrivMethod(`paintPlayers', `g:Graphics,sqW:double,sqH:double', `void'),
    PrivMethod(`paintCrates', `g:Graphics,sqW:double,sqH:double', `void'),
    PrivMethod(`paintTile', `g:Graphics,t:Tile,sqW:double,sqH:double', `void'),
    PrivMethod(`paintPiece', `g:Graphics,p:GamePiece,sqW:double,sqH:double', `void'),
    Method(`resizeSprites', `', `void')');
Aggregates(`GameView', `Board');
Aggregates(`GameView', `SpriteSheet');
AssociatedWith(`GameView', `Tile');
AssociatedWith(`GameView', `GamePiece');
DependsOn(`GameView', `SpriteSheetBuilder');

Enum(`MctsAction', `
    DELETE,
    PLACE,
    FREEZE,
    MOVE,
    EVALUATE');

Class(`MctsNode', `
    Field(`children', `List_MctsNode_'),
    Field(`parent', `MctsNode'),
    Field(`action', `MctsAction'),
    Field(`movedDirection', `int'),
    Field(`visited', `int'),
    Field(`totalScore', `double')',
`
    Constructor(`parent:MctsNode'),
    Method(`setMoveAction', `dir:int', `void'),
    Method(`setEvaluateAction', `', `void'),
    Method(`addOptions', `', `void'),
    Method(`getAction', `', `MctsAction'),
    Method(`getChildren', `', `List_MctsNode_'),
    Method(`getMoveDirection', `', `int'),
    Method(`visited', `', `void'),
    Method(`timesVisited', `', `int'),
    Method(`updateValue', `add:double', `void'),
    Method(`getScore', `', `double')');
Aggregates(`MctsNode', `MctsNode');
Aggregates(`MctsNode', `MctsAction');

Class(`MctsTree', `
    Field(`depthLimit', `int'),
    Field(`seed', `Board'),
    Field(`sandbox', `Board'),
    Field(`bestScore', `double'),
    Field(`currentBest', `Board'),
    Field(`root', `MctsNode'),
    Field(`playerStart', `Point'),
    Field(`alpha', `int'),
    Field(`beta', `int'),
    Field(`gamma', `int'),
    Field(`tau', `int'),
    Field(`rand', `Random')',
`
    Constructor(`seed:Board,α:int,β:int,γ:int,τ:int'),
    Method(`getBestScore', `', `double'),
    Method(`scrambleRecurse', `', `Board'),
    PrivMethod(`mctsSearch', `an:MctsNode,p:Player', `Board'),
    PrivMethod(`takeAction', `an:MctsNode,p:Player', `void'),
    PrivMethod(`rollout', `an:MctsNode,p:Player', `void'),
    PrivMethod(`evaluate', `', `double'),
    PrivMethod(`cratesToWall', `', `void'),
    PrivMethod(`getCongestionMetric', `', `int'),
    PrivMethod(`getTerrainMetric', `', `int'),
    PrivMethod(`seedReset', `', `void'),
    PrivMethod(`setGoalPositions', `', `void')');
Aggregates(`MctsTree', `Board');
Aggregates(`MctsTree', `MctsNode');
AssociatedWith(`MctsTree', `Player');
DependsOn(`MctsTree', `Crate');
DependsOn(`MctsTree', `Tile');

Class(`Player', `
    Field(`direction', `int')',
`
    Constructor(`b:Board,start:Point'),
    Method(`getType', `', `int'),
    Method(`doMove', `dir:int', `boolean'),
    Method(`isMoving', `', `boolean'),
    Method(`bePushed', `dir:int', `boolean'),
    Method(`getDirection', `', `int')');
AssociatedWith(`Player', `Board');

Class(`ScoreParser', `
    Field(`names', `List_String_'),
    Field(`scores', `List_Integer_')',
`
    Constructor(`'),
    Method(`getScoreTable', `', `String'),
    Method(`updateScores', `name:String,score:int', `void'),
    Method(`writeScores', `', `void'),
    Method(`parseLine', `l:String', `void')');

dnl no non-static methods... x_x
Class(`SokobanGenerator', `', `');
AssociatedWith(`SokobanGenerator', `Board');

Class(`SpriteSheetBuilder', `
    Field(`spriteSheet', `BufferedImage'),
    Field(`rows', `int'),
    Field(`cols', `int'),
    Field(`widthOffset', `int'),
    Field(`heightOffset', `int'),
    Field(`spriteWidth', `int'),
    Field(`spriteHeight', `int'),
    Field(`spriteCount', `int')',
`
    Constructor(`'),
    Method(`withSheet', `img:BufferedImage', `SpriteSheetBuilder'),
    Method(`withRows', `rows:int', `SpriteSheetBuilder'),
    Method(`withColumns', `cols:int', `SpriteSheetBuilder'),
    Method(`withxOffset', `x:int', `SpriteSheetBuilder'),
    Method(`withyOffset', `y:int', `SpriteSheetBuilder'),
    Method(`withSpriteSize', `w:int,h:int', `SpriteSheetBuilder'),
    Method(`withSpriteCount', `n:int', `SpriteSheetBuilder'),
    Method(`build', `', `SpriteSheet')');
AssociatedWith(`SpriteSheetBuilder', `SpriteSheetBuilder');
AssociatedWith(`SpriteSheetBuilder', `SpriteSheet');

Class(`SpriteSheet', `
    Field(`sprites', `List_BufferedImage_'),
    Field(`scaled', `List_Image_'),
    Field(`animationState', `int')',
`
    Constructor(`sprites:List_BufferedImage_'),
    Method(`count', `', `int'),
    Method(`resize', `width:int,height:int', `void'),
    Method(`getScaled', `index:int', `Image'),
    Method(`getSprite', `index:int', `BufferedImage'),
    Method(`animate', `p:Player', `Image')');

Class(`Tile', `
    Field(`here', `Point')',
`
    Constructor(`start:Point'),
    Method(`getCoord', `', `Point'),
    Method(`canBeFilled', `', `boolean'),
    Method(`getContents', `', `GamePiece'),
    Method(`setContents', `new:GamePiece', `void')');
AssociatedWith(`Tile', `GamePiece');

Class(`Wall', `', `
    Constructor(`start:Point'),
    Method(`canBeFilled', `', `boolean'),
    Method(`getContents', `', `GamePiece'),
    Method(`setContents', `c:GamePiece', `GamePiece')');
Extends(`Wall', `Tile');
AssociatedWith(`Wall', `GamePiece');

Class(`WarehouseBoss', `', `
    Method(`(static)main', `args:String[]', `void')');
AssociatedWith(`WarehouseBoss', `Controller');

UMLEnd
/*

              F - G - H                  feature
             /         \
    A - B - C - D - E - I                master
            ^           ^
            branch      merge

    [^feature]$ git checkout master
    [^master]$ git merge feature

              ...     F' - G' - H'       feature
             /       /
    A - B - C - D - E                    master
            ^       ^
     'branch'       rebase

    [^feature]$ git rebase master

*/
